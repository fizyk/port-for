[project]
name = "port-for"
version = "0.7.4"
description = "Utility that helps with local TCP ports management. It can find an unused TCP localhost port and remember the association."
readme = "README.rst"
keywords = ["port", "posix"]
license = {file = "LICENSE.txt"}
authors = [
    {name = "Mikhail Korobov", email = "kmike84@gmail.com"}
]
maintainers = [
    {name = "Grzegorz Śliwiński", email = "fizyk+pypi@fizyk.dev"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: POSIX",
    "Topic :: System :: Installation/Setup",
    "Topic :: System :: Systems Administration",
    "Topic :: Internet :: WWW/HTTP :: Site Management",
]
requires-python = ">= 3.9"

[project.urls]
"Source" = "https://github.com/kmike/port-for/"
"Bug Tracker" = "https://github.com/kmike/port-for/issues"
"Changelog" = "https://github.com/kmike/port-for/blob/v0.7.4/CHANGES.rst"

[project.scripts]
port-for = "port_for.cmd:main"

[build-system]
requires = ["setuptools >= 61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
zip-safe = true
packages = ["port_for"]

[tool.setuptools.package-data]
port_for = ["py.typed"]

[tool.pytest.ini_options]
xfail_strict=true
testpaths = "tests"
filterwarnings = "error"

[tool.towncrier]
directory = "newsfragments"
single_file=true
filename="CHANGES.rst"
issue_format="`#{issue} <https://github.com/kmike/port-for/issues/{issue}>`__"

[[tool.towncrier.type]]
directory = "break"
name = "Breaking changes"
showcontent = true

[[tool.towncrier.type]]
directory = "depr"
name = "Deprecations"
showcontent = true

[[tool.towncrier.type]]
directory = "feature"
name = "Features"
showcontent = true

[[tool.towncrier.type]]
directory = "bugfix"
name = "Bugfixes"
showcontent = true

[[tool.towncrier.type]]
directory = "misc"
name = "Miscellaneus"
showcontent = false

[tool.black]
line-length = 80
target-version = ['py39']
include = '.*\.pyi?$'

[tool.ruff]
line-length = 80
select = [
    "E",   # pycodestyle
    "F",   # pyflakes
    "I",   # isort
    "D",   # pydocstyle
]
exclude = [
    "port_for/docopt.py",
    "port_for/_download_ranges.py"
]


[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "0.7.4"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  (\-
    (?P<extra>.+)
  )?
  '''

[tool.tbump.git]
message_template = "Release {new_version}"
tag_template = "v{new_version}"

[[tool.tbump.field]]
# the name of the field
name = "extra"
# the default value to use, if there is no match
default = ""


# For each file to patch, add a [[file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "port_for/__init__.py"

[[tool.tbump.file]]
src = "pyproject.toml"
search = 'version = "{current_version}"'

[[tool.tbump.file]]
src = "pyproject.toml"
search = '"Changelog" = "https://github.com/kmike/port-for/blob/v{current_version}/CHANGES.rst"'

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

[[tool.tbump.before_commit]]
name = "Build changelog"
cmd = "pipenv run towncrier build --version {new_version} --yes"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"